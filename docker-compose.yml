# docker-compose.yml - Multi-environment container orchestration
version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        NODE_VERSION: 18.20.5
    container_name: localization-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=/app/data/app.db
    env_file:
      - .env
    volumes:
      - uploads:/app/uploads
      - userdb:/app/userdb
      - backup:/app/backup
      - app_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - localization-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis service for queue system
  redis:
    image: redis:7.4-alpine
    container_name: localization-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - localization-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Development service (for local development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: localization-app-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      - .:/app
      - /app/node_modules
      - uploads:/app/uploads
      - userdb:/app/userdb
      - backup:/app/backup
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - localization-network
    profiles:
      - dev

  # NGINX reverse proxy (for production)
  nginx:
    image: nginx:1.27-alpine
    container_name: localization-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - localization-network
    profiles:
      - production

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: localization-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - localization-network
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:11.5.0
    container_name: localization-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - localization-network
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  uploads:
    driver: local
  userdb:
    driver: local
  backup:
    driver: local
  app_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network for service communication
networks:
  localization-network:
    driver: bridge
