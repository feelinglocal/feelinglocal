/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SearchStrategy,
  SearchStrategy$inboundSchema,
  SearchStrategy$outboundSchema,
} from "./searchstrategy.js";

export type CacheEntry = {
  /**
   * Unique ID for the cache entry.
   */
  id: string;
  /**
   * The prompt associated with the cache entry.
   */
  prompt: string;
  /**
   * The response associated with the cache entry.
   */
  response: string;
  attributes: { [k: string]: string };
  /**
   * The similarity metric used for similarity comparison.
   */
  similarity: number;
  searchStrategy: SearchStrategy;
};

/** @internal */
export const CacheEntry$inboundSchema: z.ZodType<
  CacheEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  prompt: z.string(),
  response: z.string(),
  attributes: z.record(z.string()),
  similarity: z.number(),
  searchStrategy: SearchStrategy$inboundSchema,
});

/** @internal */
export type CacheEntry$Outbound = {
  id: string;
  prompt: string;
  response: string;
  attributes: { [k: string]: string };
  similarity: number;
  searchStrategy: string;
};

/** @internal */
export const CacheEntry$outboundSchema: z.ZodType<
  CacheEntry$Outbound,
  z.ZodTypeDef,
  CacheEntry
> = z.object({
  id: z.string(),
  prompt: z.string(),
  response: z.string(),
  attributes: z.record(z.string()),
  similarity: z.number(),
  searchStrategy: SearchStrategy$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheEntry$ {
  /** @deprecated use `CacheEntry$inboundSchema` instead. */
  export const inboundSchema = CacheEntry$inboundSchema;
  /** @deprecated use `CacheEntry$outboundSchema` instead. */
  export const outboundSchema = CacheEntry$outboundSchema;
  /** @deprecated use `CacheEntry$Outbound` instead. */
  export type Outbound = CacheEntry$Outbound;
}

export function cacheEntryToJSON(cacheEntry: CacheEntry): string {
  return JSON.stringify(CacheEntry$outboundSchema.parse(cacheEntry));
}

export function cacheEntryFromJSON(
  jsonString: string,
): SafeParseResult<CacheEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheEntry' from JSON`,
  );
}

